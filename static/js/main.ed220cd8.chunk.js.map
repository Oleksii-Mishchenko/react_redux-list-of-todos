{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","currentTodo","action","status","query","initialFilter","All","filterReducer","filter","todos","todosReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","state","dispatch","visibleTodos","useMemo","filteredTodos","Active","completed","Completed","normalizedQuery","toLowerCase","title","includes","length","className","map","id","isCurrentTodo","classNames","onClick","currentTodoActions","handleTodoSelection","TodoFilter","onSubmit","event","preventDefault","onChange","filterActions","target","value","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","TodoModal","useState","isLoading","setIsLoading","hasError","setHasError","user","setUser","loadUser","a","userFromServer","useEffect","handleModalClose","href","email","name","App","loadTodos","todosFromServer","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ed220cd8.chunk.js","sourcesContent":["export enum Status {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype CurrentTodo = Todo | null;\ntype CurrentTodoAction = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  currentTodo: CurrentTodo = null,\n  action: CurrentTodoAction,\n): CurrentTodo => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return currentTodo;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetStatusAction = { type: 'filter/STATUS', payload: Status };\ntype SetQueryAction = { type: 'filter/QUERY', payload: string };\n\nexport const actions = {\n  setStatus: (status: Status): SetStatusAction => ({\n    type: 'filter/STATUS',\n    payload: status,\n  }),\n\n  setQuery: (query: string): SetQueryAction => ({\n    type: 'filter/QUERY',\n    payload: query,\n  }),\n};\n\ntype Filter = {\n  status: Status;\n  query: string;\n};\n\nconst initialFilter: Filter = {\n  status: Status.All,\n  query: '',\n};\n\ntype FilterAction = SetStatusAction | SetQueryAction;\n\nconst filterReducer = (\n  filter: Filter = initialFilter,\n  action: FilterAction,\n): Filter => {\n  switch (action.type) {\n    case 'filter/STATUS':\n      return { ...filter, status: action.payload };\n\n    case 'filter/QUERY':\n      return { ...filter, query: action.payload };\n\n    default:\n      return filter;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype LoadTodosAction = { type: 'todos/LOAD', payload: Todo[] };\n\nconst loadTodos = (todos: Todo[]): LoadTodosAction => ({\n  type: 'todos/LOAD',\n  payload: todos,\n});\n\nexport const actions = { loadTodos };\n\ntype TodosAction = LoadTodosAction;\n\nconst todosReducer = (\n  todos: Todo[] = [],\n  action: TodosAction,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/LOAD':\n      return [...todos, ...action.payload];\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Status } from '../../types/Status';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const { status, query } = useAppSelector(state => state.filter);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const handleTodoSelection = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  const visibleTodos = useMemo(() => {\n    let filteredTodos = todos;\n\n    switch (status) {\n      case Status.Active:\n        filteredTodos = filteredTodos.filter(({ completed }) => !completed);\n        break;\n\n      case Status.Completed:\n        filteredTodos = filteredTodos.filter(({ completed }) => completed);\n        break;\n\n      default:\n        break;\n    }\n\n    if (query) {\n      const normalizedQuery = query.toLowerCase();\n\n      filteredTodos = filteredTodos.filter(({ title }) => {\n        const normalizedTitle = title.toLowerCase();\n\n        return normalizedTitle.includes(normalizedQuery);\n      });\n    }\n\n    return filteredTodos;\n  }, [status, query]);\n\n  return (\n    <>\n      {!visibleTodos.length && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {visibleTodos.map((todo) => {\n            const { id, title, completed } = todo;\n            const isCurrentTodo = currentTodo?.id === id;\n\n            return (\n              <tr\n                data-cy=\"todo\"\n                key={id}\n                className={\n                  classNames({ 'has-background-info-light': isCurrentTodo })\n                }\n              >\n                <td className=\"is-vcentered\">{id}</td>\n                <td className=\"is-vcentered\">\n                  {completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p\n                    className={classNames(\n                      completed ? 'has-text-success' : 'has-text-danger',\n                    )}\n                  >\n                    {title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => handleTodoSelection(todo)}\n                  >\n                    <span className=\"icon\">\n                      <i\n                        className={\n                          classNames(\n                            'far',\n                            isCurrentTodo ? 'fa-eye-slash' : 'fa-eye',\n                          )\n                        }\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const { status, query } = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  const handleStatusChange = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    dispatch(\n      filterActions.setStatus(event.target.value as Status),\n    );\n  };\n\n  const handleQueryChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    dispatch(\n      filterActions.setQuery(event.target.value),\n    );\n  };\n\n  const handleQueryReset = () => {\n    dispatch(\n      filterActions.setQuery(''),\n    );\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleStatusChange}\n            value={status}\n          >\n            <option value={Status.All}>\n              All\n            </option>\n\n            <option value={Status.Active}>\n              Active\n            </option>\n\n            <option value={Status.Completed}>\n              Completed\n            </option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              aria-label=\"Clear search field\"\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleQueryReset}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\nconst BASE_URL\n  = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  const fullURL = `${BASE_URL}${url}.json`;\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\nexport const TodoModal: React.FC = () => {\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [hasError, setHasError] = useState<boolean>(false);\n  const [user, setUser] = useState<User | null>(null);\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const loadUser = async (userId: number) => {\n    try {\n      setIsLoading(true);\n\n      const userFromServer = await getUser(userId);\n\n      setUser(userFromServer);\n    } catch {\n      setHasError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (currentTodo) {\n      loadUser(currentTodo.userId);\n    }\n  }, []);\n\n  const handleModalClose = () => dispatch(currentTodoActions.removeTodo());\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading && <Loader />}\n\n      {hasError && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"\n                modal-card-title\n                has-text-weight-medium\n                has-text-danger\n              \"\n            >\n              Error\n            </div>\n\n            <button\n              type=\"button\"\n              aria-label=\"Close this window\"\n              className=\"delete\"\n              onClick={handleModalClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block has-text-danger\">\n              Error occured while loading user info.\n            </p>\n          </div>\n        </div>\n      )}\n\n      {(user && currentTodo) && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              aria-label=\"Close this window\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleModalClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n              {' by '}\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [hasError, setHasError] = useState<boolean>(false);\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const todos = useAppSelector(state => state.todos);\n\n  const loadTodos = async () => {\n    try {\n      setIsLoading(true);\n\n      const todosFromServer = await getTodos();\n\n      dispatch(todosActions.loadTodos(todosFromServer));\n    } catch {\n      setHasError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            {!!todos.length && (\n              <div className=\"block\">\n                <TodoFilter />\n              </div>\n            )}\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n\n              {hasError && (\n                <p className=\"notification is-danger\">\n                  Error occured while loading todos.\n                  Please try again later.\n                </p>\n              )}\n\n              {!!todos.length && <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}